@page "/"
@using MarkovMelodyCreator.Data
@using Melanchall.DryWetMidi.Composing
@using Melanchall.DryWetMidi.Interaction
@using Melanchall.DryWetMidi.MusicTheory

<div class="flex flex-col">
    <label for="key">
        Key:
        <select name="key" @bind="_selectedKey">
            @foreach (var note in Enum.GetNames(typeof(NoteName)))
            {
                <option value="@note">@note.Replace("Sharp", "#")</option>
            }
        </select>
    </label>

    <label for="scale">
        Scale:
        <select name="scale" @bind="_selectedScale">
            <option value="Major">Major</option>
            <option value="Minor">Minor</option>
        </select>
    </label>
</div>

<div>
    <table>
        <thead class="border-b">
            <tr>
                <th class="text-sm font-medium text-gray-900 px-6 py-4 text-left"></th>
                @for (int i = 0; i < _markovChain.AdjacencyMatrix.Count(); i++)
                {
                    var _i = i;
                    <th class="text-sm font-medium text-gray-900 px-6 py-4 text-left">
                        @CurrentScaleNotes[_i].ToString().Replace("Sharp", "#")
                    </th>
                }
            </tr>
        </thead>
        @for (int i = 0; i < _markovChain.AdjacencyMatrix.Count(); i++)
        {
            var _i = i;
            <tr class="border-b">
                <td>
                    @CurrentScaleNotes[_i].ToString().Replace("Sharp", "#")
                </td>
                @for (int j = 0; j < _markovChain.AdjacencyMatrix[_i].Count(); j++)
                {
                    var _j = j;
                    <td 
                        class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap" 
                        @onclick="@((e) => HandleEdgeSelect(_i, _j))"
                        >
                        @_markovChain.AdjacencyMatrix[_i][_j]
                    </td>

                }
            </tr>
        }
    </table>
</div>

@if (_selectedEdge != null)
{
    <div>@SelectedEdge</div>

    <div>
        <input @bind-value="SelectedEdgeProbability" type="range" name="probability" min="0" max="1" step="0.01">
        <label for="probability">Probability</label>
    </div>
    <div>@SelectedEdgeProbability</div>
}

@code {

    private string? _selectedKey;
    public NoteName SelectedKey
    {
        get
        {
            Enum.TryParse(_selectedKey, out NoteName note);
            return note;
        }
    }

    private string? _selectedScale;
    public Scale SelectedScale
    {
        get => _selectedScale switch
        {
            "Major" => new Scale(ScaleIntervals.Major, SelectedKey),
            "Minor" => new Scale(ScaleIntervals.Minor, SelectedKey),
            _ => new Scale(ScaleIntervals.HarmonicMinor, SelectedKey)
        };
    }

    public List<NoteName> CurrentScaleNotes
    {
        get => SelectedScale.GetNotesNames().Take(7).ToList();
    }

    public string GetNote(int idx) => CurrentScaleNotes[idx].ToString().Replace("Sharp", "#");

    MarkovChain _markovChain = default!;

    private Edge? _selectedEdge;
    public string SelectedEdge => _selectedEdge != null
        ? $"{GetNote(_selectedEdge.to)} -> {GetNote(_selectedEdge.from)}"
        : "";

    private float _selectedEdgeProbability = 0;
    public float SelectedEdgeProbability
    {
        get => _selectedEdgeProbability;
        set {
            if (_selectedEdge != null)
            {
                _selectedEdgeProbability = value;
                _markovChain.UpdateEdge(_selectedEdge.to, _selectedEdge.from, value);
            }

        }
    }

    protected override async Task OnInitializedAsync()
    {
        _markovChain = new MarkovChain(CurrentScaleNotes.Count());
    }

    private void HandleEdgeSelect(int from, int to)
    {
        _selectedEdge = new Edge(from, to);

        _selectedEdgeProbability = _markovChain.GetValue(from, to);
    }

    public record Edge(int to, int from);
}
