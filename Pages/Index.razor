@page "/"
@inject MidiService _midiService
@using MarkovMelodyCreator.Data
@using MarkovMelodyCreator.Extensions
@using Melanchall.DryWetMidi.Composing
@using Melanchall.DryWetMidi.Interaction
@using Melanchall.DryWetMidi.MusicTheory

<div class="flex flex-row gap-4 mb-2">
    <label for="key"
        class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300"
        >
        Key:
        <select name="key" @bind="_selectedKey"
            class="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
            >
            @foreach (var note in Enum.GetNames(typeof(NoteName)))
            {
                <option value="@note">@note.Replace("Sharp", "#")</option>
            }
        </select>
    </label>

    <label for="scale" 
        class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300"
    >
        Scale:
        <select name="scale" @bind="_selectedScale" 
            class="mt-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        >
            <option value="Major" selected>Major</option>
            <option value="Minor">Minor</option>
        </select>
    </label>
</div>

<div class="grid grid-cols-6 gap-4">
    <div class="col-span-5">
        @for (int i = 0; i < _markovChain.Size(); i++)
        {
            var _i = i;
            var values = _markovChain.GetNeighborsAsIntegers(_i);

            <StackedBarChart @bind-Values="values"
                         ValueLabels="@CurrentScaleNoteLabels"
                         OnClickCallback="(e) => SelectedNoteIndex = _i"
                         IsSelected="@(_i == SelectedNoteIndex)"
                         Label="@GetNote(_i)" />
        }
    </div>
    <div class="">
        @if (SelectedNoteIndex >= 0)
        {
            var values = _markovChain.GetNeighborsAsIntegers(SelectedNoteIndex);

            @for (int j = 0; j < values.Count(); j++)
            {
                var _j = j;
                <Slider Label="@GetNote(_j)"
                Value="values[_j]"
                ValueChanged="(n) => {
                        values[_j] = n;
                        _markovChain.UpdateAllNodeNeighbors(SelectedNoteIndex, values);
                    }" />
            }


        }
    </div>
</div>
<div class="my-4">
    <label for="numberOfNotes"
        class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300"
        >
        Total Notes to Generate
    </label>
    <input name="numberOfNotes" type="number" @bind-value="NumberOfNotesToGenerate"
      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
    />
</div>
<div class="my-4">
    <button @onclick="GenerateMidiFile"
        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Generate
    </button>
</div>

@code {

    private string? _selectedKey;
    public NoteName SelectedKey
    {
        get
        {
            Enum.TryParse(_selectedKey, out NoteName note);
            return note;
        }
    }

    private string _selectedScale = "Major";
    public Scale SelectedScale
    {
        get => _selectedScale switch
        {
            "Major" => new Scale(ScaleIntervals.Major, SelectedKey),
            "Minor" => new Scale(ScaleIntervals.Minor, SelectedKey),
            _ => new Scale(ScaleIntervals.HarmonicMinor, SelectedKey)
        };
    }

    public List<NoteName> CurrentScaleNotes
    {
        get => SelectedScale.GetNotesNames().Take(7).ToList();
    }

    public List<string> CurrentScaleNoteLabels => CurrentScaleNotes.Select(n => n.ToString().Replace("Sharp", "#")).ToList();

    public string GetNote(int idx) => CurrentScaleNotes[idx].ToString().Replace("Sharp", "#");

    public int SelectedNoteIndex { get; set; } = -1;

    public int NumberOfNotesToGenerate { get; set; }

    MarkovChain _markovChain = default!;

    protected override async Task OnInitializedAsync()
    {
        _markovChain = new MarkovChain(CurrentScaleNotes.Count());
    }

    public void GenerateMidiFile()
    {
        _midiService.GenerateMidiFile(_markovChain, CurrentScaleNotes, NumberOfNotesToGenerate);
    }

}
